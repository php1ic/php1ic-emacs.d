* Appearance
** General Settings
#+BEGIN_SRC emacs-lisp
  ;;(set-default-font "DejaVu Sans Mono 7")
  ;;(set-frame-font "Inconsolata-7")
  (set-face-attribute 'default nil
                      :font "DejaVu Sans Mono"
                      :weight 'light
                      :height 70)

  ;; Don't change the font for sub/superscript in latex
  (eval-after-load "tex-mode" '(fset 'tex-font-lock-suscript 'ignore))

  ;;Use spaces for indenting, not tabs
  (setq-default indent-tabs-mode nil)

  ;; Don't put package update files in the dashboard recent file list
  (setq recentf-exclude '(
                          ".*-autoloads\\.el\\'"
                          )
        )

  ;; searches case sensitive by default
  (setq case-fold-search nil)

  ;; Always end a file with a newline
  (setq require-final-newline t)

  ;; Column numbers in mode line
  (column-number-mode t)

  ;; Remove toolbar
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Show line numbers
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)

  ;; Highlight current line
  (global-hl-line-mode 1)
  ;; To customize the background color
  ;;(set-face-background 'hl-line "#330")

  ;; Highlight the current region
  (transient-mark-mode 1)

  ;; Highlight matching parens
  (show-paren-mode 1)

  ;; Move forwards by single words if string is CamelCase
  ;; (global-subword-mode 1)
  ;; Move forward by the entire string if string is CamelCase
  (global-superword-mode 1)

  ;; Display the time in the mode bar
  (setq display-time-day-and-date t
        display-time-24hr-format t)
  (display-time)

  ;; Scroll line by line not page/screen at a time
  (setq scroll-step           1
        scroll-conservatively 100)

  ;; Don't add newlines to end of buffer when scrolling
  (setq next-line-add-newlines nil)

  ;; Show the battery charge level
  (if (equal "Battery status not available"
             (battery))
      (display-battery-mode 1))

  ;; Start maximised
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))

  ;; Silence compiler warnings as they can be pretty disruptive
  (setq native-comp-async-report-warnings-errors nil)
#+END_SRC

** Dashboard
We are using the dashboard package so stop the default startup screen.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    ;; Not sure if this location is guaranteed to exist
    (setq dashboard-startup-banner "/usr/share/icons/hicolor/128x128/apps/emacs.png")
    (setq dashboard-items '(
                            (recents  . 5)
                            (projects . 5)
                            )
          )
    (setq dashboard-banner-logo-title "Welcome to emacs! Enjoy Making Awesomely Creative Stuff")
    )
#+END_SRC

** Theme
;;Not much to say here, use the solarized dark theme.
;;#+BEGIN_SRC emacs-lisp
;;  (use-package solarized-theme
;;    :ensure t
;;    :config
;;    (load-theme 'solarized-dark t)
;;    )
;;#+END_SRC

;; Let's try gruvbox
;; #+BEGIN_SRC emacs-lisp
;;   (use-package gruvbox-theme
;;     :ensure t
;;     :config
;;     (load-theme 'gruvbox-dark-medium t)
;;     )
;; #+END_SRC

Now Oceanic Next
#+BEGIN_SRC emacs-lisp
  (use-package oceanic-theme
    :ensure t
    :config
    (load-theme 'oceanic t)
    )
#+END_SRC

** Spell checker and dictionary
Set aspell as the checker and make sure it uses british english.
#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "aspell")

  (setq ispell-dictionary "british")
#+END_SRC

** Change the mode line
The default mode line is a bit compact, use the doom mode line to make it look nicer.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :custom ((doom-modeline-height 20))
    )
#+END_SRC

** Custom frame title
Add the current file/buffer and project name to the title, if we are in a project.
#+BEGIN_SRC emacs-lisp
  (setq frame-title-format
        '((:eval
           (let ((project-name (projectile-project-name)))
             (unless (string= "-" project-name)
               (format "[%s] " project-name))
             )
           )
          "%b"
          )
        )
#+END_SRC

* Packages
** Config file profiler
;; What takes so long to get started?
;; #+BEGIN_SRC emacs-lisp
;;   (use-package esup
;;     :ensure t
;;     :commands (esup)
;;     )
;; #+END_SRC

** Auto Completion
I'm having a mental block when it comes to auto-completion.
I got this of the internet [[https://www.sandeepnambiar.com/setting-up-emacs-for-c++/]]
It ain't broke so, for the moment, I ain't gonna fix it
#+BEGIN_SRC emacs-lisp
  (use-package company
      :ensure t
      :diminish
      :config
      (setq lsp-completion-provider :capf)
      :custom
      (company-begin-commands '(self-insert-command))
      (company-idle-delay .1)
      (company-minimum-prefix-length 1)
      (company-show-numbers t)
      (company-tooltip-align-annotations 't)
      (global-company-mode t)
      )

  (use-package lsp-mode
    :ensure t
    :init
    (setq lsp-keymap-prefix "s-z")
    (setq lsp-clients-clangd-executable "/usr/bin/clangd")
    ;; (setq lsp-pyls-plugins-pylint-enabled nil)
    ;; (setq-default lsp-pyls-configuration-sources ["flake8"])
    :hook (
           (lsp-mode . lsp-enable-which-key-integration)
           (python-mode . lsp)
           (cmake-mode . lsp)
           (c++-mode . lsp)
           (sh-mode . lsp)
           (latex-mode . lsp)
           )
    :commands lsp
    )

  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp)))
    )

  (use-package lsp-ui
    :ensure t
    ;;:commands lsp-ui-mode
    :config
    (setq lsp-ui-sideline-ignore-duplicate t)
    ;; Default value is 100 which is a bit short for C++
    (setq lsp-ui-sideline-diagnostic-max-line-length 150)
    (add-hook 'lsp-mode-hook 'lsp-ui-mode)
    )

  ;; (use-package lsp-ivy
  ;;   :ensure t
  ;;   :commands lsp-ivy-workspace-symbol
  ;;   )

  ;; company-lsp is no longer support - https://github.com/emacs-lsp/lsp-mode#overview
  ;; should be using company-capf, will investigate later
  ;;(use-package company-lsp
  ;;  :ensure t
  ;;  :commands company-lsp
  ;;  :config
  ;;  (push 'company-lsp company-backends) ;; add company-lsp as a backend
  ;;  (add-to-list 'company-lsp-filter-candidates '(digestif . nil))
  ;;  )
#+END_SRC

** C++ : Modern font lock
Inbuild C++ mode doesn't recognise modern features
#+BEGIN_SRC emacs-lisp
  (use-package modern-cpp-font-lock
    :ensure t
    :after c++-mode
    :hook (c++-mode . modern-c++-font-lock-mode)
    )
#+END_SRC

** Treesitter
 Tree sitter is the new way of syntax highlighting, lets try it out
 #+BEGIN_SRC emacs-lisp
   (use-package tree-sitter-langs
     :ensure t
     )

   (use-package tree-sitter
     :ensure t
     :config
     (global-tree-sitter-mode)
     ;;(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
     :hook
     (tree-sitter-after-on . tree-sitter-hl-mode)
     )
 #+END_SRC

** Org
Not sure if we need to install the org package, but lets do it anyway.
The org-bullets package is pure aesthetic.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :defer t
    :init (setq org-log-done t)
    )

  (setq org-ellipsis " ")

  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)

  (setq org-confirm-babel-evaluate nil)

  (setq org-export-with-smart-quotes t)

  (add-hook 'org-mode-hook 'org-indent-mode)

  (use-package org-bullets
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode)))
    )
#+END_SRC

** Keybindings
Don't open a new frame, edit org-mode src blocks in the current buffer.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c '") 'org-edit-src-code)
#+END_SRC

** Beacon
Briefly flash on the cursor line when changing buffers.
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :diminish
    :config
    (beacon-mode 1)
    )
#+END_SRC

** Rainbow Delimiters
Change the colour of matching pairs of brackets/parentheses/delimiters if there are >1 in a single expression.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook
    (prog-mode . rainbow-delimiters-mode)
    )
#+END_SRC

** Hideshow
Allow the collapsing of sections of code/files so you can focus on the area you are interested in.
Currently only activated for programming modes.
#+BEGIN_SRC emacs-lisp
  (use-package hideshow
    :ensure t
    :diminish hs-minor-mode
    :hook
    (prog-mode . hs-minor-mode)
    )
#+END_SRC

** Expand Region
Incrementally highlight increasing amounts of scope.
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region)
    )
#+END_SRC

** Multiple Cursors
This package acts like an interactive macro.
Select a region, call this package to also select the next matching region in the buffer, repeat as required.
You can now apply the necessary alteration to all instances of said region in the buffer as you have ... multiple cursors.
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind
    ("s->" . mc/mark-next-like-this)
    ("s-<" . mc/mark-previous-like-this)
    ("C-c s->" . mc/mark-all-like-this)
    ("C->" . mc/mark-next-word-like-this)
    ("C-<" . mc/mark-previous-word-like-this)
    ("C-c C->" . mc/mark-all-words-this)
    )
#+END_SRC

** Magit
I use git => I use magit.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status)
    )
#+END_SRC

** Git gutter
Put markers in the margin to show if a line has been modified.
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe+
    :ensure t
    :diminish git-gutter+-mode
    :config
    (global-git-gutter+-mode)
    )
#+END_SRC

** Swiper & Avy
Nicer default searching.
Swiper shows results in the mode line, as well as the buffer, giving a good overview of search results.
Avy allows quick navigation in the current view of the buffer via searching a single character.

TODO: Get case sensitive searching to work.
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . 'swiper)
    )

  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char)
    )
#+END_SRC

** Which Key
Never get stuck mid-shortcut again.
After an inital key-chord, all available options will be shown in the mini buffer with a description.
If you can't remember the first part then you're all out of luck.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish
    :init
    (which-key-mode)
    :hook
    (
     (c-mode . lsp)
     (cpp-mode . lsp)
     )
    )
#+END_SRC

** Projectile
Provides functionality to interact with projects e.g. compile, search, switch better definition and implementation.
#+BEGIN_SRC emacs-lisp
  ;;Gnome3 uses super-p so have turned it off with dconf-editor
  ;;/org/gnome/mutter/keybindings/switch-monitor
  (use-package projectile
    :ensure t
    :bind-keymap ("s-p" . projectile-command-map)
    :init
    (projectile-mode)
    :config
    ;; cmake project is a bit too generic, add more details so I can jump to test
    ;; https://projectile.readthedocs.io/en/latest/projects/#adding-custom-project-types
    (projectile-register-project-type 'c++-cmake '("CMakeLists.txt")
                                      :compilation-dir "build"
                                      :configure "cmake %s -B %s"
                                      :compile "cmake --build ."
                                      :src-dir "src"
                                      :test "ctest"
                                      :test-suffix "_test"
                                      :test-dir "tests"
                                      )
    )
#+END_SRC

** RG - ripgrep
Better searching within a project
#+BEGIN_SRC emacs-lisp
  (use-package rg
    :ensure t
    :config
    (rg-enable-default-bindings)
    )

  (use-package ripgrep
    :ensure t
    )
#+END_SRC

** Switch Windows
Instead of 'randomly' cycling through multiple frames, immediately visit the one you want.
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
      (setq switch-window-input-style 'minibuffer)
      (setq switch-window-increase 4)
      (setq switch-window-threshold 2)
      (setq switch-window-shortcut-style 'qwerty)
      (setq switch-window-qwerty-shortcuts
          '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
    :bind
    ([remap other-window] . switch-window)
    )
#+END_SRC

** Diminish
I like a clean and minimal mode-line so don't show the active minor modes.
Packages loaded with use-package can be removed with ":diminsh", so this list should be short.

TODO: Would I need this package if there was nothing in the list?
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'subword-mode)
    (diminish 'eldoc-mode)
    (diminish 'abbrev-mode)
    (diminish 'auto-revert-mode)
    )
#+END_SRC

** Yasnippiets
Snippets can save a lot of time, and typo hunting.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :init
    (yas-global-mode 1)
    (yas-reload-all)
    :hook
    (prog-mode . yas-minor-mode)
    )
#+END_SRC
*** My own snippets
"<el"-<TAB> will create an elisp code block. Good for playing in this file.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC")
               )
#+END_SRC
** Whitespace
Highlight the parts of a line that breach a set character limit.
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :diminish
    :hook (prog-mode . whitespace-mode)
    :config
    (setq-default
     whitespace-line-column 120
     whitespace-style '(face lines-tail)
     )
    )
#+END_SRC

Delete trailing whitespace on save, except markdown mode when they represent something
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook '(lambda()
                                 (when (not (or (derived-mode-p 'markdown-mode)))
                                   (delete-trailing-whitespace)))
            )
#+END_SRC

** All the icons
Fancy icons in dired mode.
Don't forget to execute `M-x all-the-icons-install-fonts` the first time you run/use/install
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :config
    (use-package all-the-icons-dired
      :ensure t
      :diminish
      :after all-the-icons
      :hook (dired-mode . all-the-icons-dired-mode)
      )
    )
#+END_SRC

** Format All
All formatting for multiple languages
#+BEGIN_SRC emacs-lisp
  (use-package format-all
    :ensure t
    )
#+END_SRC

** Ivy & Counsel
Alter how M-x is run and give details for each command
#+BEGIN_SRC emacs-lisp
  ;; (use-package ivy-rich
  ;;   :ensure t
  ;;   :init (ivy-rich-mode 1)
  ;;   )
  ;;
  ;;  (use-package ivy-posframe
  ;;    :ensure t
  ;;    :after ivy
  ;;    :config
  ;;    (setq ivy-posframe-display-functions-alist
  ;;          '((swiper          . ivy-posframe-display)
  ;;            (complete-symbol . ivy-posframe-display)
  ;;            (counsel-M-x     . ivy-posframe-display)
  ;;            (t               . ivy-posframe-display)))
  ;;    (set-face-attribute 'ivy-posframe nil :foreground "white" :background "Black")
  ;;
  ;;    (ivy-posframe-mode 1)
  ;;    )
  ;;
  ;; (use-package counsel
  ;;   :ensure t
  ;;   :bind (("M-x" . counsel-M-x)
  ;;          ("C-x b" . counsel-ibuffer)
  ;;          ("C-x C-f" . counsel-find-file)
  ;;          )
  ;;   )
  ;;
  ;; (use-package helpful
  ;;   :ensure t
  ;;   :custom
  ;;   (counsel-describe-function-function #'helpful-callable)
  ;;   (counsel-describe-variable-function #'helpful-variable)
  ;;   :bind
  ;;   ([remap describe-function] . counsel-describe-function)
  ;;   ([remap describe-command] . helpful-command)
  ;;   ([remap describe-variable] . counsel-describe-variable)
  ;;   ([remap describe-key] . helpful-key)
  ;;   )
  ;;
  ;; (use-package counsel-projectile
  ;;   :ensure t
  ;;   :config (counsel-projectile-mode)
  ;;   )
#+END_SRC

** Helpful
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key)
    ;; ([remap describe-function] . counsel-describe-function)
    ;; ([remap describe-variable] . counsel-describe-variable)
    )
#+END_SRC

** Vertico
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
    )
#+END_SRC

** Orderless
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :ensure t
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))
          )
    )
#+END_SRC

** Marginalia
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode)
    )
#+END_SRC

** Consult
#+BEGIN_SRC emacs-lisp
  (use-package consult
    :ensure t
    :bind (
           ("C-x b" . consult-buffer)
           )
    )
#+END_SRC

** Embark
#+BEGIN_SRC emacs-lisp
  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))
                 )
    )

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after
    (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode)
    )
#+END_SRC

* Additional Modes
** Python
;;This is not installed by default
;;#+BEGIN_SRC emacs-lisp
;;  (use-package python-mode
;;    :ensure t
;;    :hook (python-mode . lsp-deferred)
;;    )
;;#+END_SRC

** Ido
;; Enable ido mode for better buffer opening.
;; #+BEGIN_SRC emacs-lisp
;;   (use-package flx-ido
;;     :ensure t
;;     :init
;;     (flx-ido-mode 1)
;;     )
;;
;;   (ido-mode 1)
;;   (ido-everywhere 1)
;;   (setq ido-enable-flex-matching t)
;;   (setq ido-use-faces nil)
;;   (setq ido-create-new-buffer 'always)
;;
;;   (use-package ido-vertical-mode
;;     :ensure t
;;     :config
;;     (ido-vertical-mode)
;;     )
;;
;;   (use-package ido-completing-read+
;;     :ensure t
;;     :config
;;     (ido-ubiquitous-mode)
;;     )
;; #+END_SRC

** Gitlab-CI
Additional syntax highlighting for .gitlab-ci.yml files
#+BEGIN_SRC emacs-lisp
  (use-package gitlab-ci-mode
    :ensure t
    )

  (use-package gitlab-ci-mode-flycheck
    :ensure t
    :after flycheck gitlab-ci-mode
    :init
    (gitlab-ci-mode-flycheck-enable)
    )
#+END_SRC

** CMake
Ensure cmake mode and some addtional packages
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :ensure t
    )

  (use-package cmake-font-lock
    :ensure t
    :hook (cmake-mode . cmake-font-lock-activate)
    )
#+END_SRC

** Yaml
;;Wasn't installed by default.
;;#+BEGIN_SRC emacs-lisp
;;  (use-package yaml-mode
;;    :ensure t
;;    )
;;#+END_SRC

** Markdown
;;Wasn't installed by default.
;;#+BEGIN_SRC emacs-lisp
;;  (use-package markdown-mode
;;      :ensure t
;;      :mode ("\\.md" . markdown-mode)
;;      )
;;#+END_SRC

** Modes for specific file extensions
Creating combined tex/eps figures with xfig outputs files with non-standard extensions.
Make sure they are highlighted appropriately.
Clang-format files are yaml.
#+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist
        (append '(
                  ("\\.pstex_t$" . latex-mode)
                  ("\\.pstex$" . ps-mode)
                  ("\\.clang-format\\'" . yaml-mode)
                  ("\\.clang-tidy\\'" . yaml-mode)
                  )
                auto-mode-alist)
        )
#+END_SRC

* Functions & Custom shortcuts
** Follow a split : C-x 2/3
In vanilla emacs, if you split a window, you remain the original frame.
Change this behaviour so you follow the split into the new frame.
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    "Move into the new window that is created."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1)
    )
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)


  (defun split-and-follow-vertically ()
    "Move into the new window that is created."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1)
    )
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

** Copy Entire line : M-k
Copy the entire current line, irrelevant of horizontal position.
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    "Copies a line without regard for cursor position."
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)
        )
       )
      )
    )

  (global-set-key (kbd "M-k") 'copy-whole-line)
#+END_SRC

** Run clang-format : s-f
If there is a .clang-format file at the root of the project, run clang-format on the current buffer.
If there is no file, do nothing.
#+BEGIN_SRC emacs-lisp
  (defun clang-format-buffer-smart ()
    "Reformat buffer if .clang-format exists in the projectile root."
    (interactive)
    (when (file-exists-p (expand-file-name ".clang-format" (projectile-project-root)))
      (clang-format-buffer)
      )
    )

  ;; Map running clang-format to super-f
  (global-set-key (kbd "s-f") 'clang-format-buffer-smart)

  (defun clang-format-buffer-smart-on-save ()
    "In case we forget, run clang-format-buffer-smart on save"
    (add-hook 'before-save-hook 'clang-format-buffer-smart nil t)
    )

  (add-hook 'c++-mode-hook 'clang-format-buffer-smart-on-save)
#+END_SRC

** Resize split windows : S-C-up/down/left/right
Having turned off the scroll bar and other window decoration, I often struggle to 'grab' window borders to resize.
These shortcuts allow resizing without the mouse.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<S-C-left>") (lambda () (interactive) (shrink-window-horizontally 5)))
  (global-set-key (kbd "<S-C-right>") (lambda () (interactive) (enlarge-window-horizontally 5)))
  (global-set-key (kbd "<S-C-down>") (lambda () (interactive) (shrink-window 5)))
  (global-set-key (kbd "<S-C-up>") (lambda () (interactive) (enlarge-window 5)))
#+END_SRC
